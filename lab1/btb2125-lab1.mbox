From fe9c55c65ef3b8171d70c29931db080036b7bd08 Mon Sep 17 00:00:00 2001
From: Brennen Bickford <btb2125@columbia.edu>
Date: Sat, 30 Jan 2021 18:33:14 -0500
Subject: [PATCH 1/6] Filled out README and got part 1 working

---
 README.txt     | 35 ++++++++++++++++++++++++++++-------
 part1/Makefile | 26 ++++++++++++++++++++++++++
 part1/gcd.c    | 26 ++++++++++++++++++++++++++
 part1/gcd.h    |  6 ++++++
 part1/main.c   | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 part1/prime.c  | 24 ++++++++++++++++++++++++
 part1/prime.h  |  6 ++++++
 7 files changed, 163 insertions(+), 7 deletions(-)
 create mode 100644 part1/Makefile
 create mode 100644 part1/gcd.c
 create mode 100644 part1/gcd.h
 create mode 100644 part1/main.c
 create mode 100644 part1/prime.c
 create mode 100644 part1/prime.h

diff --git a/README.txt b/README.txt
index fd2e560..a0dffe7 100644
--- a/README.txt
+++ b/README.txt
@@ -5,7 +5,12 @@ This file should contain:
   - lab assignment number
   - answers to academic honesty questions
   - description for each part
-  
+-------------------------------------------------------------------------
+  - Brennen Bickford
+  - btb2125
+  - lab 1
+------------------------------------------------------------------------- 
+ 
 The description should indicate whether your solution for the part is
 working or not.  You may also want to include anything else you would
 like to communicate to the grader such as extra functionalities you
@@ -14,8 +19,24 @@ implemented or how you tried to fix your non-working code.
 --------------------------------------------------------------------------
 
 Please answer the academic honesty questions.
-
-
+[1] NO 
+    The tutor you isn't seeing your code or helping you with it, just helping to foster understanding by asking questions.
+[2] YES
+    Once you viewed the code, you cheated.
+[3] YES
+    Once you obtained the code, you cheated.
+[4][a] NO
+       You are allowed to talk about the content of the class.
+   [b] NO
+       Your friend is helping to teach you, not give you answers.
+   [c] NO
+       Inquiring about the learning objectives isn't academically dishonest.
+[5] YES
+    Once you have seen the code, it's too late.
+[6] NO
+    You are allowed to look up errors.
+[7] YES
+    YOu cheated when you tried to look up past lab solutions.
 
 --------------------------------------------------------------------------
 
@@ -25,12 +46,12 @@ Part 0
 Please write your answers after [ANSWER] on the same line.  Our auto-grading
 script will look for lines that contain [ANSWER].
 
-[0.1][ANSWER] 
+[0.1][ANSWER] git init
 
-[0.2][ANSWER] 
+[0.2][ANSWER] git clone
 
-[0.3][ANSWER] 
+[0.3][ANSWER] git checkout -- filename
 
-[0.4][ANSWER] 
+[0.4][ANSWER] git reset HEAD filename and then git checkout -- filename
 
 
diff --git a/part1/Makefile b/part1/Makefile
new file mode 100644
index 0000000..0c673fc
--- /dev/null
+++ b/part1/Makefile
@@ -0,0 +1,26 @@
+CC = gcc
+CFLAGS = -Wall -g
+LDLIBS = -lm
+
+
+main: main.o prime.o gcd.o
+	gcc main.o prime.o gcd.o -o main
+main.o:  main.c prime.h gcd.h
+	gcc -c main.c
+prime.o: prime.c  prime.h 
+	gcc -c prime.c
+
+gcd: gcd.c gcd.h
+	gcc -c gcd.c
+
+
+.PHONY: clean
+clean:
+	rm -f *.o a.out core main 
+	
+.PHONY: all
+
+all: clean main
+
+
+
diff --git a/part1/gcd.c b/part1/gcd.c
new file mode 100644
index 0000000..68682a5
--- /dev/null
+++ b/part1/gcd.c
@@ -0,0 +1,26 @@
+#include "gcd.h"
+
+
+
+
+int gcd(int x, int y){
+
+	if (y==0){
+		return x;
+	}
+	else{
+		return gcd(y, x%y);
+	}	
+
+
+
+
+
+}	
+
+
+
+
+
+
+
diff --git a/part1/gcd.h b/part1/gcd.h
new file mode 100644
index 0000000..38cad9b
--- /dev/null
+++ b/part1/gcd.h
@@ -0,0 +1,6 @@
+#ifndef _GCD_H_
+#define _GCD_H_
+
+int gcd(int x, int y);
+#endif
+	
diff --git a/part1/main.c b/part1/main.c
new file mode 100644
index 0000000..7db28ae
--- /dev/null
+++ b/part1/main.c
@@ -0,0 +1,47 @@
+
+#include <stdio.h>
+#include "prime.h"
+#include "gcd.h"
+
+int main()
+{
+	int x,y,z;
+	double avg;		
+
+	printf("Please type first integer: ");
+	scanf("%d", &x);
+
+        printf("Please type second integer: ");
+	scanf("%d", &y);
+
+
+	printf("You typed in %d and %d\n", x, y);
+	avg = ((double)x+y) / 2;
+	printf("The average is: %f\n", avg);
+
+	if (isPrime(x)==1){
+		printf("%d is prime.\n", x );
+	}
+	else{
+		printf("%d is not prime.\n",x );
+	}	
+	if (isPrime(y)==1){
+        	printf("%d is prime.\n", y );
+        }
+        else{
+	        printf("%d is not prime.\n", y );
+        }
+
+	z = gcd(x,y);
+
+	if (z==1){
+		printf("%d and %d are relatively prime\n",x,y);
+	}
+	else{
+		printf("%d and %d are not relatively prime\n",x,y);
+	}
+	return 0;
+}	
+
+
+
diff --git a/part1/prime.c b/part1/prime.c
new file mode 100644
index 0000000..b7cf129
--- /dev/null
+++ b/part1/prime.c
@@ -0,0 +1,24 @@
+#include "prime.h"
+
+
+int isPrime (int x)
+{
+
+	int i;
+
+	if (x==2){
+		return 1;
+	}
+
+	for (i=2; i<x; i++){
+		if ( x%i ==  0){
+			return 0;
+		}
+		
+
+		
+	}
+
+	return 1;
+
+}
diff --git a/part1/prime.h b/part1/prime.h
new file mode 100644
index 0000000..8a97ffe
--- /dev/null
+++ b/part1/prime.h
@@ -0,0 +1,6 @@
+#ifndef _PRIME_H_
+#define _PRIME_H_
+
+int isPrime(int x);
+
+#endif
-- 
2.17.1


From 6baa217c3e05024a49efb826e4c7d5b78a5f67ee Mon Sep 17 00:00:00 2001
From: Brennen Bickford <btb2125@columbia.edu>
Date: Sat, 30 Jan 2021 21:49:07 -0500
Subject: [PATCH 2/6] Started convert on part 2 and created Makefile

---
 part2/Makefile      | 14 ++++++++++++++
 part2/convert.c     | 19 +++++++++++++++++++
 part2/printf-test.c |  1 +
 3 files changed, 34 insertions(+)
 create mode 100644 part2/Makefile
 create mode 100644 part2/convert.c

diff --git a/part2/Makefile b/part2/Makefile
new file mode 100644
index 0000000..5877014
--- /dev/null
+++ b/part2/Makefile
@@ -0,0 +1,14 @@
+main: convert.c
+	gcc convert.c -o convert
+
+
+
+
+
+
+.PHONY: clean
+clean:
+	rm -f *.o a.out core main
+
+.PHONY: all
+all: clean main
diff --git a/part2/convert.c b/part2/convert.c
new file mode 100644
index 0000000..feba9db
--- /dev/null
+++ b/part2/convert.c
@@ -0,0 +1,19 @@
+#include <stdio.h>
+
+int main(){
+
+int x;
+scanf("%d", &x);
+
+printf("signed dec:   %d\n", x);
+printf("unsigned dec: %u\n", x);
+printf("hex:          %x\n", x);
+printf("binary:       %d\n", x);
+
+
+}
+
+
+
+
+
diff --git a/part2/printf-test.c b/part2/printf-test.c
index 10f2b58..745ed58 100644
--- a/part2/printf-test.c
+++ b/part2/printf-test.c
@@ -10,3 +10,4 @@ int main()
 
     return 0;
 }
+
-- 
2.17.1


From 22adcd756f7b0faeb36569e3c6336244512d6909 Mon Sep 17 00:00:00 2001
From: Brennen Bickford <btb2125@columbia.edu>
Date: Sun, 31 Jan 2021 12:54:28 -0500
Subject: [PATCH 3/6] Got part 2 working

---
 part2/Makefile  |  2 +-
 part2/convert.c | 42 ++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 41 insertions(+), 3 deletions(-)

diff --git a/part2/Makefile b/part2/Makefile
index 5877014..3b1dad6 100644
--- a/part2/Makefile
+++ b/part2/Makefile
@@ -8,7 +8,7 @@ main: convert.c
 
 .PHONY: clean
 clean:
-	rm -f *.o a.out core main
+	rm -f *.o a.out core convert
 
 .PHONY: all
 all: clean main
diff --git a/part2/convert.c b/part2/convert.c
index feba9db..448c9d0 100644
--- a/part2/convert.c
+++ b/part2/convert.c
@@ -2,13 +2,51 @@
 
 int main(){
 
-int x;
+int x,i;
 scanf("%d", &x);
 
 printf("signed dec:   %d\n", x);
 printf("unsigned dec: %u\n", x);
 printf("hex:          %x\n", x);
-printf("binary:       %d\n", x);
+printf("binary:       ");
+
+
+for(i=0;i<32;i++){
+
+	int p;
+	
+	p = x & (1<<(31-i));
+	//printf("%d",p);
+	
+
+
+
+
+
+
+
+	if(p==0){
+	       printf("0");
+       	}else{
+ 	printf("1");
+	}	
+
+
+if (i==31){
+	printf("\n");
+	break;
+}	
+		
+	if ((i+1)%4==0){
+		printf(" ");
+	}	
+
+
+
+
+
+}	
+
 
 
 }
-- 
2.17.1


From 400aefeef6e039f6c8f0ebf410d4d25161cb7c6d Mon Sep 17 00:00:00 2001
From: Brennen Bickford <btb2125@columbia.edu>
Date: Sun, 31 Jan 2021 20:15:30 -0500
Subject: [PATCH 4/6] Cleaned up code and fixed indentation

---
 README.txt      |  6 ++++-
 part1/Makefile  |  9 ++-----
 part1/gcd.c     | 16 +-----------
 part1/main.c    | 20 ++++++---------
 part1/prime.c   |  7 ------
 part2/Makefile  |  5 ----
 part2/convert.c | 65 +++++++++++++++++++------------------------------
 7 files changed, 41 insertions(+), 87 deletions(-)

diff --git a/README.txt b/README.txt
index a0dffe7..93bc226 100644
--- a/README.txt
+++ b/README.txt
@@ -9,6 +9,10 @@ This file should contain:
   - Brennen Bickford
   - btb2125
   - lab 1
+  - part 1 description: I used the recursive form of the Euclidean Algorithm as found on
+    https://en.wikipedia.org/wiki/Euclidean_algorithm and all of the code should work as
+    expected.
+  - part 2 description: All of the code should work as intended.
 ------------------------------------------------------------------------- 
  
 The description should indicate whether your solution for the part is
@@ -34,7 +38,7 @@ Please answer the academic honesty questions.
 [5] YES
     Once you have seen the code, it's too late.
 [6] NO
-    You are allowed to look up errors.
+    You are allowed to look up error codes.
 [7] YES
     YOu cheated when you tried to look up past lab solutions.
 
diff --git a/part1/Makefile b/part1/Makefile
index 0c673fc..7e9ccb1 100644
--- a/part1/Makefile
+++ b/part1/Makefile
@@ -1,25 +1,20 @@
-CC = gcc
-CFLAGS = -Wall -g
-LDLIBS = -lm
-
-
 main: main.o prime.o gcd.o
 	gcc main.o prime.o gcd.o -o main
+
 main.o:  main.c prime.h gcd.h
 	gcc -c main.c
+
 prime.o: prime.c  prime.h 
 	gcc -c prime.c
 
 gcd: gcd.c gcd.h
 	gcc -c gcd.c
 
-
 .PHONY: clean
 clean:
 	rm -f *.o a.out core main 
 	
 .PHONY: all
-
 all: clean main
 
 
diff --git a/part1/gcd.c b/part1/gcd.c
index 68682a5..a4efc31 100644
--- a/part1/gcd.c
+++ b/part1/gcd.c
@@ -1,26 +1,12 @@
 #include "gcd.h"
 
 
-
-
 int gcd(int x, int y){
 
 	if (y==0){
 		return x;
-	}
-	else{
+	}else{
 		return gcd(y, x%y);
 	}	
-
-
-
-
-
 }	
 
-
-
-
-
-
-
diff --git a/part1/main.c b/part1/main.c
index 7db28ae..0ef4a11 100644
--- a/part1/main.c
+++ b/part1/main.c
@@ -1,4 +1,3 @@
-
 #include <stdio.h>
 #include "prime.h"
 #include "gcd.h"
@@ -14,31 +13,28 @@ int main()
         printf("Please type second integer: ");
 	scanf("%d", &y);
 
-
-	printf("You typed in %d and %d\n", x, y);
+	printf("You typed in %d and %d.\n", x, y);
 	avg = ((double)x+y) / 2;
 	printf("The average is: %f\n", avg);
 
 	if (isPrime(x)==1){
 		printf("%d is prime.\n", x );
-	}
-	else{
+	}else{
 		printf("%d is not prime.\n",x );
-	}	
+	}
+
 	if (isPrime(y)==1){
         	printf("%d is prime.\n", y );
-        }
-        else{
+        }else{
 	        printf("%d is not prime.\n", y );
         }
 
 	z = gcd(x,y);
 
 	if (z==1){
-		printf("%d and %d are relatively prime\n",x,y);
-	}
-	else{
-		printf("%d and %d are not relatively prime\n",x,y);
+		printf("%d and %d are relatively prime.\n",x,y);
+	}else{
+		printf("%d and %d are not relatively prime.\n",x,y);
 	}
 	return 0;
 }	
diff --git a/part1/prime.c b/part1/prime.c
index b7cf129..01522e4 100644
--- a/part1/prime.c
+++ b/part1/prime.c
@@ -3,9 +3,7 @@
 
 int isPrime (int x)
 {
-
 	int i;
-
 	if (x==2){
 		return 1;
 	}
@@ -14,11 +12,6 @@ int isPrime (int x)
 		if ( x%i ==  0){
 			return 0;
 		}
-		
-
-		
 	}
-
 	return 1;
-
 }
diff --git a/part2/Makefile b/part2/Makefile
index 3b1dad6..731d47d 100644
--- a/part2/Makefile
+++ b/part2/Makefile
@@ -1,11 +1,6 @@
 main: convert.c
 	gcc convert.c -o convert
 
-
-
-
-
-
 .PHONY: clean
 clean:
 	rm -f *.o a.out core convert
diff --git a/part2/convert.c b/part2/convert.c
index 448c9d0..a7f0ed0 100644
--- a/part2/convert.c
+++ b/part2/convert.c
@@ -2,53 +2,38 @@
 
 int main(){
 
-int x,i;
-scanf("%d", &x);
+	int x,i;
+	printf("Please enter an integer: ");
+	scanf("%d", &x);
 
-printf("signed dec:   %d\n", x);
-printf("unsigned dec: %u\n", x);
-printf("hex:          %x\n", x);
-printf("binary:       ");
+	printf("signed dec:   %d\n", x);
+	printf("unsigned dec: %u\n", x);
+	printf("hex:          %x\n", x);
+	printf("binary:       ");
 
+	for(i=0;i<32;i++){
 
-for(i=0;i<32;i++){
-
-	int p;
+		int p;
 	
-	p = x & (1<<(31-i));
-	//printf("%d",p);
+		p = x & (1<<(31-i));
 	
+		if(p==0){
+			 printf("0");
+	       	}else{
+			printf("1");
+		}	
+	
+	
+		if (i==31){
+			printf("\n");
+			break;
+		}	
+			
+		if ((i+1)%4==0){
+			printf(" ");
+		}	
 
-
-
-
-
-
-
-	if(p==0){
-	       printf("0");
-       	}else{
- 	printf("1");
-	}	
-
-
-if (i==31){
-	printf("\n");
-	break;
-}	
-		
-	if ((i+1)%4==0){
-		printf(" ");
 	}	
-
-
-
-
-
-}	
-
-
-
 }
 
 
-- 
2.17.1


From ad34382483a5c97af6c2098e1b0c180baacaedc5 Mon Sep 17 00:00:00 2001
From: Brennen Bickford <btb2125@columbia.edu>
Date: Sun, 31 Jan 2021 20:39:46 -0500
Subject: [PATCH 5/6] Made a few fixes to prime.c and added comments.

---
 part1/gcd.c     |  2 +-
 part1/prime.c   | 12 ++++++++----
 part2/convert.c |  6 ++++--
 3 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/part1/gcd.c b/part1/gcd.c
index a4efc31..42defce 100644
--- a/part1/gcd.c
+++ b/part1/gcd.c
@@ -1,6 +1,6 @@
 #include "gcd.h"
 
-
+//recursive version of the Euclidean Algorithm from Wikipedia. Source also in README
 int gcd(int x, int y){
 
 	if (y==0){
diff --git a/part1/prime.c b/part1/prime.c
index 01522e4..e0ef722 100644
--- a/part1/prime.c
+++ b/part1/prime.c
@@ -1,17 +1,21 @@
 #include "prime.h"
 
-
+//returns 0 if not prime and 1 if prime.
 int isPrime (int x)
 {
 	int i;
-	if (x==2){
-		return 1;
-	}
 
+	//since 1 is technically not prime
+	if (x==1){
+		return 0;
+	}
+	
+	//int i begins at 2 so that x isn't modded by 1
 	for (i=2; i<x; i++){
 		if ( x%i ==  0){
 			return 0;
 		}
 	}
+	
 	return 1;
 }
diff --git a/part2/convert.c b/part2/convert.c
index a7f0ed0..1658a98 100644
--- a/part2/convert.c
+++ b/part2/convert.c
@@ -11,10 +11,12 @@ int main(){
 	printf("hex:          %x\n", x);
 	printf("binary:       ");
 
+	
 	for(i=0;i<32;i++){
 
 		int p;
-	
+
+		//loop moves bit all the way to the left then increments to the right
 		p = x & (1<<(31-i));
 	
 		if(p==0){
@@ -23,7 +25,7 @@ int main(){
 			printf("1");
 		}	
 	
-	
+		//breaks at the end so that it doesn't create an extra space and starts a new line
 		if (i==31){
 			printf("\n");
 			break;
-- 
2.17.1


From 3e7ec84e3b7d72b590cc1150f580958d880784fa Mon Sep 17 00:00:00 2001
From: Brennen Bickford <btb2125@columbia.edu>
Date: Sun, 31 Jan 2021 20:54:14 -0500
Subject: [PATCH 6/6] Reworked Makefiles

---
 part1/Makefile | 8 ++++----
 part2/Makefile | 7 +++++--
 2 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/part1/Makefile b/part1/Makefile
index 7e9ccb1..86349d3 100644
--- a/part1/Makefile
+++ b/part1/Makefile
@@ -1,14 +1,14 @@
+CC= gcc
+CFLAGS= -Wall -g
+LDLIBS= -lm
+
 main: main.o prime.o gcd.o
-	gcc main.o prime.o gcd.o -o main
 
 main.o:  main.c prime.h gcd.h
-	gcc -c main.c
 
 prime.o: prime.c  prime.h 
-	gcc -c prime.c
 
 gcd: gcd.c gcd.h
-	gcc -c gcd.c
 
 .PHONY: clean
 clean:
diff --git a/part2/Makefile b/part2/Makefile
index 731d47d..697d802 100644
--- a/part2/Makefile
+++ b/part2/Makefile
@@ -1,5 +1,8 @@
-main: convert.c
-	gcc convert.c -o convert
+CC= gcc
+CFLAGS= -Wall -g
+LDLIBS= -lm
+
+convert: convert.c
 
 .PHONY: clean
 clean:
-- 
2.17.1

